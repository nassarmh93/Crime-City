# Generated by Django 4.2.3 on 2025-05-18 11:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Combat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cash_stolen', models.PositiveIntegerField(default=0)),
                ('experience_gained', models.PositiveIntegerField(default=0)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'game_combat',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.CharField(blank=True, max_length=200, null=True)),
                ('buy_price', models.PositiveIntegerField(default=0)),
                ('sell_price', models.PositiveIntegerField(default=0)),
                ('min_level', models.PositiveIntegerField(default=1)),
                ('attack_power', models.PositiveIntegerField(default=0)),
                ('defense_power', models.PositiveIntegerField(default=0)),
                ('speed_bonus', models.PositiveIntegerField(default=0)),
                ('energy_restore', models.PositiveIntegerField(default=0)),
                ('health_restore', models.PositiveIntegerField(default=0)),
                ('is_tradable', models.BooleanField(default=True)),
                ('is_equippable', models.BooleanField(default=False)),
                ('is_consumable', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'game_item',
            },
        ),
        migrations.CreateModel(
            name='ItemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'game_item_type',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.CharField(blank=True, max_length=200, null=True)),
                ('is_safe_zone', models.BooleanField(default=False)),
                ('energy_cost', models.PositiveIntegerField(default=1)),
                ('min_level', models.PositiveIntegerField(default=1)),
                ('district', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'game_location',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('level', models.PositiveIntegerField(default=1)),
                ('experience', models.PositiveIntegerField(default=0)),
                ('cash', models.BigIntegerField(default=1000)),
                ('bank_balance', models.BigIntegerField(default=0)),
                ('strength', models.PositiveIntegerField(default=10)),
                ('defense', models.PositiveIntegerField(default=10)),
                ('speed', models.PositiveIntegerField(default=10)),
                ('dexterity', models.PositiveIntegerField(default=10)),
                ('intelligence', models.PositiveIntegerField(default=10)),
                ('energy', models.PositiveIntegerField(default=100)),
                ('max_energy', models.PositiveIntegerField(default=100)),
                ('health', models.PositiveIntegerField(default=100)),
                ('max_health', models.PositiveIntegerField(default=100)),
                ('is_in_hospital', models.BooleanField(default=False)),
                ('hospital_release_time', models.DateTimeField(blank=True, null=True)),
                ('is_in_jail', models.BooleanField(default=False)),
                ('jail_release_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_energy_refill', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_health_refill', models.DateTimeField(default=django.utils.timezone.now)),
                ('current_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players_present', to='game.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='player', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'game_player',
            },
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.CharField(blank=True, max_length=200, null=True)),
                ('base_price', models.PositiveIntegerField(default=1000)),
                ('base_income', models.PositiveIntegerField(default=100)),
                ('min_level', models.PositiveIntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'property types',
                'db_table': 'game_property_type',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('purchase_price', models.PositiveIntegerField()),
                ('current_value', models.PositiveIntegerField()),
                ('income_rate', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField(default=1)),
                ('last_income_collection', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('purchased_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='properties', to='game.location')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='game.player')),
                ('property_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='game.propertytype')),
            ],
            options={
                'verbose_name_plural': 'properties',
                'db_table': 'game_property',
            },
        ),
        migrations.CreateModel(
            name='MarketListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price', models.PositiveIntegerField()),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('sold', 'Sold'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('sold_at', models.DateTimeField(blank=True, null=True)),
                ('buyer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to='game.player')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_listings', to='game.item')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_listings', to='game.player')),
            ],
            options={
                'db_table': 'game_market_listing',
            },
        ),
        migrations.AddField(
            model_name='item',
            name='item_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='game.itemtype'),
        ),
        migrations.CreateModel(
            name='CombatLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('combat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='game.combat')),
            ],
            options={
                'db_table': 'game_combat_log',
                'ordering': ['timestamp'],
            },
        ),
        migrations.AddField(
            model_name='combat',
            name='attacker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attacks', to='game.player'),
        ),
        migrations.AddField(
            model_name='combat',
            name='defender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defenses', to='game.player'),
        ),
        migrations.AddField(
            model_name='combat',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='combats', to='game.location'),
        ),
        migrations.AddField(
            model_name='combat',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='combat_wins', to='game.player'),
        ),
        migrations.CreateModel(
            name='PlayerInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('is_equipped', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.item')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='game.player')),
            ],
            options={
                'db_table': 'game_player_inventory',
                'unique_together': {('player', 'item')},
            },
        ),
        migrations.CreateModel(
            name='LocationConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('travel_time', models.PositiveIntegerField(default=0)),
                ('travel_cost', models.PositiveIntegerField(default=0)),
                ('from_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_from', to='game.location')),
                ('to_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_to', to='game.location')),
            ],
            options={
                'db_table': 'game_location_connection',
                'unique_together': {('from_location', 'to_location')},
            },
        ),
    ]
